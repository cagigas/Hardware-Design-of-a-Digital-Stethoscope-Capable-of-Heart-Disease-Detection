library ieee;
	use ieee.std_logic_1164.all;
--  use ieee.std_logic_arith.all;
	use ieee.std_logic_unsigned.all;
	use ieee.std_logic_signed.all;
	use ieee.numeric_std.all;
	use work.david.all;
  
ENTITY Main IS
	PORT(	SW 								: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
			CLOCK_50,CLOCK2_50,CLOCK_108M 	: IN STD_LOGIC;
			KEY								:IN STD_LOGIC_VECTOR(3 downto 0);
			CONT_H, CONT_V						: IN INTEGER;
			ROJO,VERDE,AZUL						: OUT STD_LOGIC_VECTOR(7 downto 0)
	);
end Main;

architecture generador of Main is
	signal Data8				: INTEGER RANGE -127 to 128;
	signal DInRAM				: STD_LOGIC_VECTOR (1023 DOWNTO 0);
	signal Sick, Sickness		: ausculation1000;
	
	signal CLOCK_2K			: STD_LOGIC;
	signal RedUp, GreenUp, BlueUp	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedDown, GreenDown, BlueDown	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedFrUp, GreenFrUp, BlueFrUp	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedFrDown, GreenFrDown, BlueFrDown	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedBt1, GreenBt1, BlueBt1	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedBt2, GreenBt2, BlueBt2	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedBt3, GreenBt3, BlueBt3	: STD_LOGIC_VECTOR(7 downto 0);
	signal RedBt4, GreenBt4, BlueBt4	: STD_LOGIC_VECTOR(7 downto 0);

	signal prueba: integer range 0 to 9;
	signal datoS			: ausculation1000;
	signal datoini: integer range -127 to 128;
	signal data2: std_logic_vector(255 downto 0);
	signal radd: integer range 0 to 255;
	signal wadd: integer range 0 to 255;
	signal q: STD_LOGIC_VECTOR (1023 DOWNTO 0);
	signal a: signed(7 downto 0);
	

--	COMPONENT PLLSound IS
--		PORT
--		(
--			inclk0		: IN STD_LOGIC  := '0';
--			c0		: OUT STD_LOGIC 
--		);
--	END COMPONENT;

	COMPONENT CheckSignalDown IS
		GENERIC(	VERTICAL				: NATURAL;
					HORIZONTAL			: NATURAL
		);
		PORT(		CLOCK_108M 			: IN STD_LOGIC;
					CONT_H, CONT_V		: IN INTEGER;
					DATAIN				: IN ausculation1000;
					ROJO,VERDE,AZUL	: OUT STD_LOGIC_VECTOR(7 downto 0)
		);
	END COMPONENT;
	
	COMPONENT Frequency IS
		GENERIC( VERTICAL				: NATURAL;
					HORIZONTAL			: NATURAL
		);
		PORT(		CLOCK_108M 			: IN STD_LOGIC;
					CONT_H, CONT_V		: IN INTEGER;
					NUMBER				: IN INTEGER;
					ROJO,VERDE,AZUL	: OUT STD_LOGIC_VECTOR(7 downto 0)
		);
	END COMPONENT;
	COMPONENT Button IS
		GENERIC( 	VERTICAL			: NATURAL;
					HORIZONTAL			: NATURAL
		);
		PORT(		CLOCK_108M 			: IN STD_LOGIC;
					CONT_H, CONT_V		: IN INTEGER;
					ROJO,VERDE,AZUL	: OUT STD_LOGIC_VECTOR(7 downto 0)
		);
	END COMPONENT;

	begin
	
	--PLL: PLLSound PORT MAP (CLOCK_50,CLOCK_2K);
	PFU: Frequency GENERIC MAP (46,786)PORT MAP (CLOCK_108M,CONT_H, CONT_V, to_integer(unsigned(SW)), RedFrUp, GreenFrUp, BlueFrUp);
	PFD: Frequency GENERIC MAP (549,786)PORT MAP (CLOCK_108M,CONT_H, CONT_V, 76, RedFrDown, GreenFrDown, BlueFrDown);
	BT1: Button GENERIC MAP (970,1290)PORT MAP (CLOCK_108M,CONT_H, CONT_V, RedBt1, GreenBt1, BlueBt1);
	BT2: Button GENERIC MAP (970,1335)PORT MAP (CLOCK_108M,CONT_H, CONT_V, RedBt2, GreenBt2, BlueBt2);
	BT3: Button GENERIC MAP (970,1380)PORT MAP (CLOCK_108M,CONT_H, CONT_V, RedBt3, GreenBt3, BlueBt3);
	BT4: Button GENERIC MAP (970,1425)PORT MAP (CLOCK_108M,CONT_H, CONT_V, RedBt4, GreenBt4, BlueBt4);

	CSD: CheckSignalDown GENERIC MAP (670,391)PORT MAP (CLOCK_108M,CONT_H, CONT_V, Sickness, RedDown, GreenDown, BlueDown);

	process(CLOCK_108M,KEY(0))
		begin  
        if(KEY(0)='0')then
			ROJO   <= (others => '0');
			VERDE  <= (others => '0');
			AZUL   <= (others => '0');
			
		elsif (CLOCK_108M'event and CLOCK_108M ='1')then
			
			if ((CONT_V = 35) or (CONT_V = 36) or (CONT_V = 1053) or (CONT_V = 1054) or (CONT_V = 546) or (CONT_V = 547) or (CONT_V = 548)) then
				if((CONT_H > 252) and (CONT_H < 1529)) then
					ROJO  <= (others => '1');
					VERDE <= (others => '1');
					AZUL  <= (others => '1');
				else 
					ROJO  <= (others => '0');
					VERDE <= (others => '0');
					AZUL  <= (others => '0');
				end if;
				
			elsif((CONT_V > 45) and (CONT_V < 146))then	--Frecuency Up
				if((CONT_H = 253) or (CONT_H = 254) or (CONT_H = 1527) or (CONT_H = 1528)) then 
						ROJO  <= (others => '1');
						VERDE <= (others => '1');
						AZUL  <= (others => '1');
				elsif ((CONT_H > 785) and (CONT_H < 996)) then 
						ROJO <= RedFrUp;
						VERDE <= GreenFrUp;
						AZUL <= BlueFrUp;
				else 
						ROJO  <= (others => '0');
						VERDE <= (others => '0');
						AZUL  <= (others => '0');
				end if;
				
			elsif((CONT_V > 548) and (CONT_V < 649))then	--Frecuency Down
				if((CONT_H = 253) or (CONT_H = 254) or (CONT_H = 1527) or (CONT_H = 1528)) then 
						ROJO  <= (others => '1');
						VERDE <= (others => '1');
						AZUL  <= (others => '1');
				elsif ((CONT_H > 785) and (CONT_H < 996)) then 
						ROJO <= RedFrDown;
						VERDE <= GreenFrDown;
						AZUL <= BlueFrDown;
						
						
				else 
						ROJO  <= (others => '0');
						VERDE <= (others => '0');
						AZUL  <= (others => '0');
				end if;
				
			elsif ((CONT_V > 649) and (CONT_V < 936))then --Down Windows
				  
				if((CONT_H = 253) or (CONT_H = 254) or (CONT_H = 1527) or (CONT_H = 1528))then
					ROJO  <= (others => '1');
					VERDE <= (others => '1');
					AZUL  <= (others => '1');
				elsif ((CONT_H > 390) and (CONT_H < 1391)) then
					ROJO  <= RedDown;
					VERDE <= GreenDown;
					AZUL  <= BlueDown;
				else 
					ROJO  <= (others => '0');
					VERDE <= (others => '0');
					AZUL  <= (others => '0');
				end if;
			elsif (CONT_V > 969) and (CONT_V < 1010) then	
				if ((CONT_H = 253) or (CONT_H = 254) or (CONT_H = 1527) or (CONT_H = 1528)) then 
					ROJO  <= (others => '1');
					VERDE <= (others => '1');
					AZUL  <= (others => '1');
				elsif ((CONT_H > 1289) and (CONT_H < 1331)) then	-- Button 1
					ROJO <= RedBt1;
					VERDE <= GreenBt1;
					AZUL <= BlueBt1;
				elsif ((CONT_H > 1334) and (CONT_H < 1376)) then	-- Button 2
					ROJO <= RedBt2;
					VERDE <= GreenBt2;
					AZUL <= BlueBt2;
				elsif ((CONT_H > 1379) and (CONT_H < 1421)) then	-- Button 3
					ROJO <= RedBt3;
					VERDE <= GreenBt3;
					AZUL <= BlueBt3;
				elsif ((CONT_H > 1424) and (CONT_H < 1466)) then	-- Button 4
					ROJO <= RedBt4;
					VERDE <= GreenBt4;
					AZUL <= BlueBt4;
				else 
					ROJO  <= (others => '0');
					VERDE <= (others => '0');
					AZUL  <= (others => '0');
				end if;
			elsif ((CONT_V > 36) and (CONT_V < 1053))then
				if ((CONT_H = 253) or (CONT_H = 254) or (CONT_H = 1527) or (CONT_H = 1528)) then 
					ROJO  <= (others => '1');
					VERDE <= (others => '1');
					AZUL  <= (others => '1');
				else 
					ROJO  <= (others => '0');
					VERDE <= (others => '0');
					AZUL  <= (others => '0');
				end if;
			else 
				ROJO  <= (others => '0');
				VERDE <= (others => '0');
				AZUL  <= (others => '0');
			end if;
 		end if; --CLK,RESET  
	end process;
end generador;