LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_signed.all;

ENTITY sonido IS
	GENERIC(n			: integer:= 24;
			num_words	: integer:= 480);
  
	PORT(	CLOCK_50,AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK,AUD_ADCDAT			:IN STD_LOGIC;
			CLOCK2_50															:IN STD_LOGIC;
			KEY																:IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			I2C_SDAT															:INOUT STD_LOGIC;
			I2C_SCLK,AUD_DACDAT,AUD_XCK								:OUT STD_LOGIC;
			LEDR 													:OUT STD_LOGIC_VECTOR(8 downto 0)    
	);
END sonido;

ARCHITECTURE Behavior OF sonido IS
	COMPONENT clock_generator
		PORT(	CLOCK2_50														:IN STD_LOGIC;
		    	reset															:IN STD_LOGIC;
				AUD_XCK														:OUT STD_LOGIC);
	END COMPONENT;

	COMPONENT audio_and_video_config
		PORT(	CLOCK_50,reset												:IN STD_LOGIC;
		    	I2C_SDAT														:INOUT STD_LOGIC;
				I2C_SCLK														:OUT STD_LOGIC);
	END COMPONENT;	

	COMPONENT audio_codec
		PORT(	CLOCK_50,reset,read_s,write_s							:IN STD_LOGIC;
				writedata_left, writedata_right						:IN STD_LOGIC_VECTOR(n-1 DOWNTO 0);
				AUD_ADCDAT,AUD_BCLK,AUD_ADCLRCK,AUD_DACLRCK		:IN STD_LOGIC;
				read_ready, write_ready									:OUT STD_LOGIC;
				readdata_left, readdata_right							:OUT STD_LOGIC_VECTOR(n-1 DOWNTO 0);
				AUD_DACDAT													:OUT STD_LOGIC);
	END COMPONENT;

	SIGNAL read_ready, write_ready, read_s, write_s				:STD_LOGIC;
	SIGNAL readdata_left, readdata_right							:STD_LOGIC_VECTOR(n-1 DOWNTO 0);
	SIGNAL writedata_left, writedata_right							:STD_LOGIC_VECTOR(n-1 DOWNTO 0);	
	SIGNAL reset	:STD_LOGIC;
	SIGNAL dato,dato2 	:STD_LOGIC_VECTOR(n-1 downto 0);
	type auxmem is array (9 downto 0) of std_logic_vector(n-1 downto 0);
	type memoria is array (num_words-1 downto 0) of std_logic_vector(n-1 downto 0);
	signal mem: memoria;
	signal aux: auxmem;
	signal WR,cinter, cmed:integer:=0; --puntero (posici√≥n de escritura)

	
BEGIN
	reset <= NOT(KEY(0));
	LEDR(3) <= read_ready;
	LEDR(4) <= write_ready;
	
	process(CLOCK_50, reset)
		begin
		if reset = '1' then
			LEDR(0) <= '1';
			read_s <= '0';
			write_s <= '0';
			WR <= 1;
			cinter <= 0;
		elsif (CLOCK_50'event and CLOCK_50 = '1') then
			LEDR(0) <= '0';
			if read_ready = '1' and read_s = '0' then
				dato <= readdata_left;
				read_s <= '1';
				write_s <= '0';
			--	if cinter = 2 then
				--Aqui dejo una de cada 10 muestras 4800
				--	dato2 <= dato;
--					WR <= WR + 1;
--					if WR = 9 then
--						aux(cmed) <= aux(5); --media de valores
--						cmed <= cmed + 1;
--						WR <= 1;
--					end if;
					--cinter <= 0;
			--	end if;
			--	cinter <= cinter + 1;
			elsif write_ready = '1' and write_s = '0' then
				writedata_right <= dato;
				writedata_left <= dato;
				write_s <= '1'; 
				read_s <= '0';	
			end if;
		end if;
	end process;


	my_clock_gen: clock_generator PORT MAP (CLOCK2_50, reset, AUD_XCK);
	cfg: audio_and_video_config PORT MAP (CLOCK_50, reset, I2C_SDAT, I2C_SCLK);
	codec: audio_codec PORT MAP(CLOCK_50,reset,read_s,write_s,writedata_left, writedata_right,AUD_ADCDAT,AUD_BCLK,AUD_ADCLRCK,AUD_DACLRCK,read_ready, write_ready,readdata_left, readdata_right,AUD_DACDAT);

END Behavior;