library ieee;
  use ieee.std_logic_1164.all;
  use ieee.std_logic_unsigned.all;
  use ieee.std_logic_arith.all;
  
entity Practica6 is
  port(SW :in std_logic_vector (9 downto 0);
       CLK,KEY3,RESET: in std_logic;
       VGA_SYNC, VGA_BLANK, VGA_CLK: out std_logic;
       VGA_HS, VGA_VS:out std_logic;
       VGA_R, VGA_G, VGA_B 	: OUT std_logic_vector(9 downto 0);
       LEDR: out std_logic_vector(17 downto 0));
       
end Practica6;

architecture uno of Practica6 is
  
  type colores is array (2 downto 0) of std_logic_vector(9 downto 0);
  signal color : colores; 
  signal KEYaux: std_logic; 
  signal hsync, vsync	:	std_logic;
  signal red_signal,	green_signal, blue_signal	: std_logic_vector (9 downto 0);
  signal h_cnt, v_cnt : integer;
  signal FFD1,FFD2,FFD3	:	std_logic;
  signal C: std_logic;
  
	component PLL is
		port( inclk0 :in std_logic;
			C0 : out std_logic);
      end component;
	component imagen is
      port( CLK0,RESET0 :in std_logic;
            CONT_H, CONT_V: in integer;
            ROJO,VERDE,AZUL:out std_logic_vector (9 downto 0));
    end component;
  
  begin
    
    VGA_SYNC  <= '1';
    VGA_BLANK <= '1';
  
    U: PLL port map (CLK, C);
    V: imagen port map(C,RESET,h_cnt,v_cnt,red_signal,green_signal,blue_signal);
      
	  process(CLK)
		  begin
		    if (CLK = '1' and CLK'EVENT) then
			       FFD1 <= KEY3;
			       FFD2 <= FFD1;
			       FFD3 <= FFD2;
		    end if;
		    KEYaux <= not(not(FFD2) and FFD3);
	  end process;
	
    process(C,RESET)
      variable cnt : integer;
      begin
          
      if(reset = '0')then
        cnt :=0;
        h_cnt <=0;
        v_cnt <=0;
        hsync <='0';
        vsync <='0';
        --red_signal  <= (others => '0');
        --green_signal	 <= (others => '0');
        --blue_signal  <= (others => '0');
        color(0) <= (others => '0');
        color(1) <= (others => '0');
        color(2) <= (others => '0');
        LEDR <= (others => '1');
        
      elsif (C 'event and C = '1') then
        LEDR <= (others => '0');
        ---------------------------------------------
        -- recoger las intensidades de los colores --
        ---------------------------------------------
        if(KEYaux /= '1') then
          color(cnt) <= SW;
          cnt := cnt +1;
          if (cnt > 3) then
              cnt := 0;
				  color(0) <= (others => '0');
				  color(1) <= (others => '0');
				  color(2) <= (others => '0');
          end if;
        end if;
        
        ------------------------------------
        -- generar señales de sincronismo --
        ------------------------------------
        --Sincronismo vertical
	      IF (v_cnt < 512  ) THEN
		        vsync <= '1';	
      	 ELSE
		        vsync <= '0';
	      END IF;
        
        ---- contador vectical
	      IF (v_cnt = 515) THEN
		        v_cnt <= 0;
	      ELSIF (h_cnt = 848) THEN
		        v_cnt <= v_cnt + 1;
	      END IF;
	      
	      ---- contador horizontal
         IF (h_cnt = 848) THEN
		          h_cnt <= 0;
	      ELSE
		          h_cnt <= h_cnt + 1;
	      END IF;
	      
	      --Sincronismo horizontal
	      IF (h_cnt < 784) THEN
		        hsync <= '1';
	      ELSE
		        hsync <= '0';
	      END IF;
	    
      end if; --CLK reset  
    end process;
    VGA_CLK <= C;
    VGA_HS <= hsync;
    VGA_VS <= vsync;
    VGA_R  <= red_signal;
    VGA_G  <= green_signal;
    VGA_B  <= blue_signal;
  
end uno;